swagger: '2.0'
info:
  description: >-
    シネマサンシャインAPI
  version: 9.0.0
  title: sskts-api-mock
  termsOfService: ''
  contact:
    email: yamazaki@motionpicture.jp
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: sskts-api-development-mock.azurewebsites.net
basePath: /
tags:
  - name: oauth
    description: OAuth認可
  - name: performance
    description: パフォーマンスリソースの操作
  - name: film
    description: 作品リソースの操作
  - name: screen
    description: スクリーンリソースの操作
  - name: theater
    description: 劇場リソースの操作
  - name: transaction
    description: 取引リソースの操作
  - name: owner
    description: 会員リソースの操作
schemes:
  - http
paths:
  /oauth/token:
    post:
      tags:
       - oauth
      summary: OAuth
      description: 'OAuth認可エンドポイント。アクセストークンを取得します。'
      operationId: getAccessToken
      produces:
        - application/json
      parameters:
        - name: data
          in: body
          description: ID
          required: true
          schema:
            type: object
            properties:
              grant_type:
                type: string
                enum: [client_credentials, password]
                description: 認可タイプ
              scopes:
                type: array
                items:
                  type: string
                description: 認可タイプ
              client_id:
                type: string
                description: クライアントID
              state:
                type: string
                description: 状態
              username:
                type: string
                description: ユーザーネーム
              password:
                type: string
                description: パスワード
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/Credentials'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /performances:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - performance
      summary: パフォーマンス検索
      description: '条件を指定してパフォーマンスを検索します。'
      operationId: searchPerformances
      produces:
        - application/json
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
      security:
        - oauth_application: [performances, performances.read-only]
  /performances/{performanceId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - performance
      summary: パフォーマンス取得
      description: IDでパフォーマンス情報を取得します。
      operationId: findPerformanceById
      produces:
        - application/json
      parameters:
        - name: performanceId
          in: path
          description: パフォーマンスID
          required: true
          type: string
      responses:
        200:
          $ref: '#/responses/OK'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /films/{filmId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - film
      summary: 作品取得
      description: 'IDで作品情報を取得します。'
      operationId: findFilmById
      produces:
        - application/json
      parameters:
        - name: filmId
          in: path
          description: ID
          required: true
          type: string
      responses:
        200:
          $ref: '#/responses/OK'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /screens/{screenId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - screen
      summary: スクリーン取得
      description: 'IDでスクリーン情報を取得します。'
      operationId: findScreenById
      produces:
        - application/json
      parameters:
        - name: screenId
          in: path
          description: ID
          required: true
          type: string
      responses:
        200:
          $ref: '#/responses/OK'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /theaters:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - theater
      summary: 劇場検索
      description: '条件を指定して劇場を検索します。'
      operationId: findTheatersById
      produces:
        - application/json
      responses:
        200:
          $ref: '#/responses/OK'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /theaters/{theaterId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - theater
      summary: 劇場取得
      description: 'IDで劇場情報を取得します。'
      operationId: findTheaterById
      produces:
        - application/json
      parameters:
        - name: theaterId
          in: path
          description: ID
          required: true
          type: string
      responses:
        200:
          $ref: '#/responses/OK'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /owners/me/profile:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - owner
      summary: 会員プロフィール取得
      description: 'ログイン中の会員のプロフィールを取得します。'
      operationId: findMyProfile
      produces:
        - application/json
      responses:
        200:
          description: 'ok'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/OwnerProfile'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
      security:
        - oauth_password: [owners.profile, owners.profile.read-only]
    put:
      tags:
        - owner
      summary: 会員プロフィール更新
      description: 'ログイン中の会員のプロフィールを更新します。'
      operationId: updateMyProfile
      produces:
        - application/json
      parameters:
        - name: data
          in: body
          description: プロフィール
          required: true
          schema:
            $ref: '#/definitions/OwnerProfile'
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /owners/me/cards:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - owner
      summary: 会員カード検索
      description: 'ログイン中の会員のカードを検索します。'
      operationId: findMyCards
      produces:
        - application/json
      responses:
        200:
          description: 'ok'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Card'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
    post:
      tags:
        - owner
      summary: 会員カード追加
      description: 'ログイン中の会員のカードを作成します。'
      operationId: createMyCard
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/PresavedCard'
      responses:
        '201':
          description: ok
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Card'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /owners/me/cards/{cardId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    delete:
      tags:
        - owner
      summary: 会員カード削除
      description: 'ログイン中の会員のカードを削除します。'
      operationId: deleteMyCard
      produces:
        - application/json
      parameters:
        - name: cardId
          in: path
          description: カードID
          required: true
          type: string
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /owners/me/assets/seatReservation:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    get:
      tags:
        - owner
      summary: 会員座席予約資産検索
      description: 'ログイン中の会員の座席予約資産を検索します。'
      operationId: findMySeatReservationAssets
      produces:
        - application/json
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/SeatReservationAsset'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/startIfPossible:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: 取引開始
      description: '取引を開始します。'
      operationId: startTransaction
      produces:
        - application/json
      parameters:
        - name: data
          in: body
          required: true
          schema:
            type: object
            properties:
              expires_at:
                description: 取引期限
                type: string
                example: ''
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Transaction'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /transactions/makeInquiry:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: 取引照会
      description: '予約番号と電話番号を使用して、取引を照会します。'
      operationId: makeInquiryOfTransaction
      produces:
        - application/json
      parameters:
        - name: data
          in: body
          description: 照会キー
          required: true
          schema:
            $ref: '#/definitions/TransactionInquiryKey'
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Transaction'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
        404: {$ref: '#/responses/NotFound'}
  /transactions/{transactionId}/anonymousOwner:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    patch:
      tags:
        - transaction
      summary: 取引中匿名所有者更新
      description: '取引中の匿名所有者のプロフィールを更新します。'
      operationId: updateAnonymousOwner
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: ID
          required: true
          type: string
        - name: data
          in: body
          description: プロフィール
          required: true
          schema:
            type: object
            properties:
              name_first:
                type: string
                example: ''
              name_last:
                type: string
                example: ''
              email:
                type: string
                example: ''
              tel:
                type: string
                example: ''  
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
      deprecated: true
  /transactions/{transactionId}/owners/{ownerId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    put:
      tags:
        - transaction
      summary: 取引中所有者更新
      description: '取引中の所有者のプロフィールを更新します。'
      operationId: updateOwnerInTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: ownerId
          in: path
          description: 所有者ID
          required: true
          type: string
        - name: data
          in: body
          description: プロフィール
          required: true
          schema:
            type: object
            properties:
              data:
               type: object
               properties:
                type:
                  type: string
                  enum: [owners]
                id:
                  type: string
                  example: ''
                attributes:
                  type: object
                  properties:
                    name_first:
                      type: string
                      example: ''
                    name_last:
                      type: string
                      example: ''
                    email:
                      type: string
                      example: ''
                    tel:
                      type: string
                      example: ''
                    group:
                      type: string
                      enum:
                        - "ANONYMOUS"
                        - "MEMBER"
                    username:
                      type: string
                      example: ''
                    password:
                      type: string
                      example: ''
      responses:
        200:
          description: 'ok'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/OwnerProfile'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/owners/:ownerId/cards:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: 取引中所有者カード追加
      description: '取引中の所有者のカードを作成します。'
      operationId: createCardOfOwnerInTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: ID
          required: true
          type: string
        - $ref: '#/parameters/PresavedCard'
      responses:
        '201':
          description: ok
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Card'
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/authorizations/gmo:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: GMO承認追加
      description: '進行中の取引にGMO承認を追加します。'
      operationId: createGMOAuthorization
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: data
          in: body
          description: GMOオーソリデータ
          required: true
          schema:
            type: object
            properties:
              owner_from:
                type: string
                example: ''
              owner_to:
                type: string
                example: ''
              gmo_shop_id:
                type: string
                example: ''
              gmo_shop_pass:
                type: string
                example: ''
              gmo_order_id:
                type: string
                example: ''
              gmo_amount:
                type: string
                example: ''
              gmo_access_id:
                type: string
                example: ''
              gmo_access_pass:
                type: string
                example: ''
              gmo_job_cd:
                type: string
                example: ''
              gmo_pay_type:
                type: string
                example: ''
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                    type:
                      type: string
                      enum: [authorizations]
                    id:
                      type: string
                      example: ''
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/authorizations/coaSeatReservation:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: 座席予約承認追加
      description: '進行中の取引に座席予約承認を追加します。'
      operationId: createSeatReservationAuthorization
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: data
          in: body
          description: COA仮予約データ
          required: true
          schema:
            type: object
            properties:
              owner_from:
                type: string
                example: ''
              owner_to:
                type: string
                example: ''
              coa_tmp_reserve_num:
                type: integer
                example: ''
              coa_theater_code:
                type: string
                example: ''
              coa_date_jouei:
                type: string
                example: ''
              coa_title_code:
                type: string
                example: ''
              coa_title_branch_num:
                type: string
                example: ''
              coa_time_begin:
                type: string
                example: ''
              coa_screen_code:
                type: string
                example: ''
              seats:
                type: array
                items:
                  type: object
                  properties:
                    performance:
                      type: string
                      example: ''
                    screen_section:
                      type: string
                      example: ''
                    seat_code:
                      type: string
                      example: ''
                    ticket_code:
                      type: string
                      example: ''
                    ticket_name:
                      $ref: '#/definitions/MultilingualString'
                    ticket_name_kana:
                      type: string
                      example: ''
                    std_price:
                      type: integer
                      example: ''
                    add_price:
                      type: integer
                      example: ''
                    dis_price:
                      type: integer
                      example: ''
                    sale_price:
                      type: integer
                      example: ''
                    mvtk_app_price:
                      type: integer
                      example: ''
                    add_glasses:
                      type: integer
                      example: ''
                    kbn_eisyahousiki:
                      type: string
                      example: ''
                    mvtk_num:
                      type: string
                      example: ''
                    mvtk_kbn_denshiken:
                      type: string
                      example: ''
                    mvtk_kbn_maeuriken:
                      type: string
                      example: ''
                    mvtk_kbn_kensyu:
                      type: string
                      example: ''
                    mvtk_sales_price:
                      type: integer
                      example: ''
              price:
                type: integer
                example: ''
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                    type:
                      type: string
                      enum: [authorizations]
                    id:
                      type: string
                      example: ''
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/authorizations/mvtk:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: ムビチケ承認追加
      description: '進行中の取引にムビチケ承認を追加します。'
      operationId: createMvtkAuthorization
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: data
          in: body
          description: ムビチケ着券データ
          required: true
          schema:
            type: object
            properties:
              owner_from:
                type: string
                example: ''
              owner_to:
                type: string
                example: ''
              price:
                type: integer
                example: ''
              kgygish_cd:
                type: string
                example: ''
              yyk_dvc_typ:
                type: string
                example: ''
              trksh_flg:
                type: string
                example: ''
              kgygish_sstm_zskyyk_no:
                type: string
                example: ''
              kgygish_usr_zskyyk_no:
                type: string
                example: ''
              jei_dt:
                type: string
                example: ''
              kij_ymd:
                type: string
                example: ''
              st_cd:
                type: string
                example: ''
              scren_cd:
                type: string
                example: ''
              knyknr_no_info:
                type: array
                items:
                  type: object
                  properties:
                    knyknr_no:
                      type: string
                      example: ''
                    pin_cd:
                      type: string
                      example: ''
                    knsh_info:
                      type: array
                      items:
                        type: object
                        properties:
                          knsh_typ:
                            type: string
                            example: ''
                          mi_num:
                            type: string
                            example: ''
              zsk_info:
                type: array
                items:
                  type: object
                  properties:
                    zsk_cd:
                      type: string
                      example: ''
              skhn_cd:
                type: string
                example: ''
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                    type:
                      type: string
                      enum: [authorizations]
                    id:
                      type: string
                      example: ''
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/authorizations/{authorizationId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    delete:
      tags:
        - transaction
      summary: 承認解除
      description: '進行中の取引から承認を解除します。'
      operationId: deleteAuthorization
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: authorizationId
          in: path
          description: 承認ID
          required: true
          type: string
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/enableInquiry:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    patch:
      tags:
        - transaction
      summary: 取引照会キー作成
      description: '取引を成立後に照会できるように、照会キーを作成します。'
      operationId: enableInquiryOfTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: data
          in: body
          description: 取引照会キー
          required: true
          schema:
            $ref: '#/definitions/TransactionInquiryKey'
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/notifications/email:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    post:
      tags:
        - transaction
      summary: 取引通知作成
      description: '進行中の取引に対して、成立後の通知を作成します。'
      operationId: createEmailNotification
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: data
          in: body
          description: メール通知データ
          required: true
          schema:
            type: object
            properties:
              from:
                type: string
                example: ''
              to:
                type: string
                example: ''
              subject:
                type: string
                example: ''
              content:
                type: string
                example: ''
      responses:
        200:
          description: ok
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                    type:
                      type: string
                      enum: [notifications]
                    id:
                      type: string
                      example: ''
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/notifications/{notificationId}:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    delete:
      tags:
        - transaction
      summary: 取引通知削除
      description: '進行中の取引から、成立後の通知を削除します。'
      operationId: deleteNotification
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
        - name: notificationId
          in: path
          description: 通知ID
          required: true
          type: string
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
  /transactions/{transactionId}/close:
    parameters:
      - $ref: '#/parameters/AuthorizationHeader'
    patch:
      tags:
        - transaction
      summary: 取引成立
      description: '取引を成立させます。'
      operationId: closeTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          description: 取引ID
          required: true
          type: string
      responses:
        204: {$ref: '#/responses/NoContent'}
        400: {$ref: '#/responses/BadRequest'}
        401: {$ref: '#/responses/Unauthorized'}
        403: {$ref: '#/responses/Forbidden'}
securityDefinitions:
  oauth_password:
    type: oauth2
    tokenUrl: 'http://sskts-api-development-mock.azurewebsites.net/oauth/token'
    flow: password
    scopes:
      owners.profile: プロフィール書き込み
      owners.profile.read-only: プロフィール読み取り
      owners.cards: カード書き込み
      owners.cards.read-only: カード読み取り
      owners.assets: 資産書き込み
      owners.assets.read-only: 資産読み取り
  oauth_application:
    type: oauth2
    tokenUrl: 'http://sskts-api-development-mock.azurewebsites.net/oauth/token'
    flow: application
    scopes:
      performances: パフォーマンス書き込み
      performances.read-only: パフォーマンス読み取り
      films: 作品書き込み
      films.read-only: 作品読み取り
      screens: スクリーン書き込み
      screens.read-only: スクリーン読み取り
      transactions: 取引書き込み
      transactions.read-only: 取引読み取り
      transactions.owners: 取引所有者書き込み
      transactions.owners.cards: 取引所有者カード書き込み
      transactions.authorizations: 取引承認書き込み
      transactions.notifications: 取引通知書き込み
definitions:
  Credentials:
    description: 認証情報
    type: object
    properties:
      access_token:
        type: string
        example: ''
        description: アクセストークン
      token_type:
        type: string
        example: 'Bearer'
        description: トークンタイプ
      expires_in:
        type: integer
        example: ''
        description: 有効期間(秒)
  OwnerProfile:
    description: 所有者プロフィール
    type: object
    properties:
      type:
        type: string
        enum: [owners]
      id:
        type: string
      attributes:
        type: object
        properties:
          name_first:
            description: 名
            type: string
            example: 'てつ'
          name_last:
            description: 姓
            type: string
            example: 'やまざき'
          email:
            description: メールアドレス
            type: string
            example: 'yamazaki@motionpicture.jp'
          tel:
            description: 電話番号
            type: string
            example: '09012345678'
  Card:
    description: カード情報
    type: object
    properties:
      type:
        type: string
        enum: [cards]
      id:
        type: string
        example: ''
      attributes:
        type: object
        properties:
          card_seq:
            description: カード登録連番
            type: string
            example: '0'
          card_name:
            description: カード会社略称
            type: string
            example: 'Visa'
          card_no:
            description: カード番号
            type: string
            example: '*************111'
          expire:
            description: 有効期限
            type: string
            example: '18/12'
          holder_name:
            description: 名義人
            type: string
            example: 'Tetsu Yamazaki'
  MultilingualString:
    description: 多言語文字列
    type: object
    properties:
      en:
        description: 英語
        type: string
        example: string
      ja:
        description: 日本語
        type: string
        example: 文字列
  SeatReservationAsset:
    description: 座席予約資産
    type: object
    properties:
      type:
        type: string
        enum: [assets]
      id:
        type: string
        example: ''
      attributes:
        type: object
        properties:
          performance:
            type: string
            example: ''
          screen_section:
            type: string
            example: ''
          seat_code:
            type: string
            example: ''
          ticket_code:
            type: string
            example: ''
          ticket_name:
            $ref: '#/definitions/MultilingualString'
          ticket_name_kana:
            type: string
            example: ''
          std_price:
            type: integer
            format: int64
            example: ''
          add_price:
            type: integer
            format: int64
            example: ''
          dis_price:
            type: integer
            format: int64
            example: ''
          sale_price:
            type: integer
            format: int64
            example: ''
          add_glasses:
            type: integer
            format: int64
            example: ''
          mvtk_app_price:
            type: integer
            format: int64
            example: ''
          kbn_eisyahousiki:
            type: string
            example: ''
          mvtk_num:
            type: string
            example: ''
          mvtk_kbn_denshiken:
            type: string
            example: ''
          mvtk_kbn_maeuriken:
            type: string
            example: ''
          mvtk_kbn_kensyu:
            type: string
            example: ''
          mvtk_sales_price:
            type: integer
            format: int64
            example: ''
          theater:
            type: string
            example: ''
          screen:
            type: string
            example: ''
          film:
            type: string
            example: ''
          performance_day:
            type: string
            example: ''
          performance_time_start:
            type: string
            example: ''
          performance_time_end:
            type: string
            example: ''
          theater_name:
            $ref: '#/definitions/MultilingualString'
          theater_name_kana:
            type: string
            example: ''
          theater_address:
            $ref: '#/definitions/MultilingualString'
          screen_name:
            $ref: '#/definitions/MultilingualString'
          film_name:
            $ref: '#/definitions/MultilingualString'
          film_name_kana:
            type: string
            example: ''
          film_name_short:
            type: string
            example: ''
          film_name_original:
            type: string
            example: ''
          film_minutes:
            type: integer
            format: int64
            example: ''
          film_kbn_eirin:
            type: string
            example: ''
          film_kbn_eizou:
            type: string
            example: ''
          film_kbn_joueihousiki:
            type: string
            example: ''
          film_kbn_jimakufukikae:
            type: string
            example: ''
          film_copyright:
            type: string
            example: ''
  Transaction:
    description: 取引
    type: object
    properties:
      type:
        type: string
        enum: [transactions]
      id:
        type: string
        example: ''
      attributes:
        type: object
        properties:
          status:
            description: 取引状態
            type: string
            enum: [UNDERWAY, CLOSED, EXPIRED]
          owners:
            description: 取引中所有者リスト
            type: object
            properties:
              id:
                type: string
                example: ''
              group:
                type: string
                example: ''
          expires_at:
            description: 取引進行期限日時
            type: string
            format: date-time
            example: ''
          started_at:
            description: 取引開始日時
            type: string
            format: date-time
            example: ''
  TransactionInquiryKey:
    description: 取引照会キー
    type: object
    properties:
      inquiry_theater:
        description: 劇場コード
        type: string
        example: ''
      inquiry_id:
        description: 予約番号
        type: string
        example: ''
      inquiry_pass:
        description: 電話番号
        type: string
        example: ''
  Performance:
    description: パフォーマンス
    type: object
    properties:
      day:
        type: string
parameters:
  # アクセストークン送信ヘッダー
  AuthorizationHeader:
    in: header
    name: Authorization
    type: string
    required: true
    description: Bearerトークン
  PresavedCard:
    name: data
    in: body
    description: 登録前カード情報
    required: true
    schema:
      description: 登録前カード情報
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: [cards]
            attributes:
              type: object
              properties:
                card_no:
                  description: カード番号
                  type: string
                card_pass:
                  description: パスワード
                  type: string
                expire:
                  description: 有効期限
                  type: string
                holder_name:
                  description: 名義人
                  type: string
                token:
                  description: トークン化カード情報
                  type: string
responses:
  # 200
  OK:
    description: ok
    schema:
      type: object
      properties:
        data:
          type: object
  # 204
  NoContent:
    description: レスポンスなし
  # 400
  BadRequest:
    description: 不適切なリクエスト
    schema:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              detail:
                type: string
              source:
                type: object
                properties:
                  parameter:
                    type: string
  # 401
  Unauthorized:
    description: 認証が必要
    schema:
      type: string
      enum: [Unauthorized]
  # 403
  Forbidden:
    description: アクセス権限なし
    schema:
      type: string
      enum: [Forbidden]
  # 404
  NotFound:
    description: 見つかりませんでした
    schema:
      type: object
      properties:
        data:
          type: object
